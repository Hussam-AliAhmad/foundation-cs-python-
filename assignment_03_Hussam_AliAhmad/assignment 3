student_data = [{"ID": 1,"Name": "Ahmad","Age": 20,"Major": "Computer Science","GPA": 3.7},
                {"ID": 2,"Name": "Nour","Age": 21,"Major": "Engineering","GPA": 3.9},
                {"ID": 3,"Name": "Ali","Age": 22,"Major": "Mathematics","GPA": 3.6},
                {"ID": 4,"Name": "Mohammad","Age": 19,"Major": "Biology","GPA": 3.8},
                {"ID": 5,"Name": "leen","Age": 20,"Major": "Biology","GPA": 3.5}]
# we need a function to find the students data knowing that student data and student id are arguments
def get_student_by_id(student_data, student_id):
  for student in student_data:
      if student["ID"] == student_id:
          return student
  return None
# we need a function to get all students data
def get_all_students(student_data):
  return student_data
# we need a function to get a student data by there major
def get_students_by_major(student_data, major):
  students = [student for student in student_data if student["Major"] == major]
  return students
# we need a function to add a new student 
def add_student(student_data, name, age, major, gpa):
  new_student_id = max([student["ID"] for student in student_data]) + 1
  new_student = {"ID": new_student_id,"Name": name,"Age": age,"Major": major,"GPA": gpa}
  student_data.append(new_student)
# we need a function to find common majors in two lists of students
def find_common_majors(student_data1, student_data2):
  majors1 = {student["Major"] for student in student_data1}
  majors2 = {student["Major"] for student in student_data2}
  common_majors = majors1.intersection(majors2)
  return common_majors
# we need a function to delete a student by ID
def delete_student_by_id(student_data, student_id):
  for student in student_data:
      if student["ID"] == student_id:
          student_data.remove(student)
          return
# we need a function to calculate the average GPA of all students
def calculate_average_gpa(student_data):
  total_gpa = sum(student["GPA"] for student in student_data)
  average_gpa = total_gpa / len(student_data)
  return average_gpa
# we need a function to get top performers by GPA
def get_top_performers(student_data, num_top):
  sorted_students = sorted(student_data, key=lambda student: student["GPA"], reverse=True)
  top_performers = [(student["Name"]) for student in sorted_students[:num_top]]
  return top_performers
# Main program
while True:
  print("- - - - - - - - - - - - - - -")
  print("1. Get Student by ID")
  print("2. Get All Students")
  print("3. Get Students by Major")
  print("4. Add Student")
  print("5. Find Common Majors")
  print("6. Delete Student")
  print("7. Calculate Average GPA")
  print("8. Get Top Performers")
  print("9. Exit")

  choice = int(input("Choice: "))
  if choice == 1:
      student_id = int(input("Enter student ID: "))
      student = get_student_by_id(student_data, student_id)
      if student:
          print(student)
      else:
          print("Student not found.")

  elif choice == 2:
      students = get_all_students(student_data)
      for student in students:
          print(student)

  elif choice == 3:
      major = input("Enter major: ")
      students = get_students_by_major(student_data, major)
      for student in students:
          print(student)

  elif choice == 4:
      name = input("Enter name: ")
      age = int(input("Enter age: "))
      major = input("Enter major: ")
      gpa = float(input("Enter GPA: "))
      add_student(student_data, name, age, major, gpa)
      print("Student added successfully.")

  elif choice == 5:
      # Create a second student data list (for demonstration purposes)
      student_data2 = student_data.copy()
      common_majors = find_common_majors(student_data, student_data2)
      print("Common Majors:", common_majors)

  elif choice == 6:
      student_id = int(input("Enter student ID to delete: "))
      delete_student_by_id(student_data, student_id)
      print("Student deleted successfully.")

  elif choice == 7:
      average_gpa = calculate_average_gpa(student_data)
      print(f"Average GPA: {average_gpa:.2f}")

  elif choice == 8:
      num_top = int(input("Enter the number of top performers to retrieve: "))
      top_performers = get_top_performers(student_data, num_top)
      print(f"Top Performers: {', '.join(top_performers)}")

  elif choice == 9:
      break

  else:
      print("Invalid choice. Please select a valid option.")

#ADVANCED BROWSERS TABS SIMULATION:

#https://www.w3schools.com/python/python_json.asp
import json
#https://pypi.org/project/requests/
import requests
#https://stackoverflow.com/questions/18831380/how-can-i-from-bs4-import-beautifulsoup
from bs4 import BeautifulSoup
def open_tab(browser):
  while True:
      title = input("Enter the title of the website: ")
      if not title:
          print("Title cannot be empty. Please try again.")
          continue

      url = input("Enter the URL of the website: ")
      if not url:
          print("URL cannot be empty. Please try again.")
          continue

      tab = {"title": title, "url": url}

      if tab not in browser:
          browser.append(tab)
          print(f"Opened new tab: {title} - {url}")
          break
      else:
          print(f"Tab already open: {title} - {url}")
#https://www.w3schools.com/python/ref_list_pop.asp
def close_tab(browser, index=None):
    if not browser:
        print("No tabs to close.")
        return

    if index is not None:
        try:
            index = int(index)
            if 0 <= index < len(browser):
                closed_tab = browser.pop(index)
                print(f"Closed tab: {closed_tab['title']} - {closed_tab['url']}")
            else:
                print("Invalid tab index")
        except ValueError:
            print("Invalid input. Please enter a valid tab index.")
    else:
        closed_tab = browser.pop()
        print(f"Closed last opened tab: {closed_tab['title']} - {closed_tab['url']}")
def switch_tab(browser, index=None):
    if not browser:
        print("No tabs to switch.")
        return

    if index is not None:
        try:
            index = int(index)
            if 0 <= index < len(browser):
                tab = browser[index]
            else:
                print("Invalid tab index")
                return
        except ValueError:
            print("Invalid input. Please enter a valid tab index.")
            return
    else:
        tab = browser[-1]

    # Performing web scraping to fetch and display HTML content
    try:
        response = requests.get(tab['url'])
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        print(f"HTML content of {tab['title']} - {tab['url']}:\n")
        print(soup.prettify())
    except requests.exceptions.RequestException as e:
        print(f"Error fetching content: {e}")
def display_all_tabs(browser):
    print("Display Options:")
    print("1. Display titles only")
    print("2. Display content of a specific tab")

    choice = input("Enter your choice: ")

    if choice == '1':
        print("Open tabs:")
        for i, tab in enumerate(browser):
            print(f"{i + 1}.")
            display_tabs(tab)
    elif choice == '2':
        index = int(input("Enter the index of the tab to display its content: "))
        if 0 <= index < len(browser):
            switch_tab(browser, index)
        else:
            print("Invalid tab index.")
    else:
        print("Invalid choice. Please enter 1 or 2.")
def open_nested_tab(browser):
    display_all_tabs(browser)
    
    while True:
        parent_index = input("Enter the index of the parent tab where you want to insert a nested tab: ")

        try:
            parent_index = int(parent_index)
            if 0 <= parent_index < len(browser):
                break
            else:
                print("Invalid parent tab index.")
        except ValueError:
            print("Invalid input. Please enter a valid tab index.")

    parent_tab = browser[parent_index]

    nested_title = input("Enter the title of the nested tab: ")
    nested_url = input("Enter the URL of the nested tab: ")

    nested_tab = {"title": nested_title, "url": nested_url}
    parent_tab["nested_tabs"].append(nested_tab)

    print(f"Opened nested tab under {parent_tab['title']} - {parent_tab['url']}: {nested_title} - {nested_url}")
def clear_all_tabs(browser):
    confirm = input("Are you sure you want to clear all tabs? (yes/no): ").lower()
    if confirm == 'yes':
        browser.clear()
        print("All tabs cleared.")
    else:
        print("Clearing canceled.")
